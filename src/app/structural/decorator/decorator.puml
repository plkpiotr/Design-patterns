@startuml

interface Customer {
  wear(): void
}

class Woman {
  + wear(): void
}

class Shop {
  - customer: Customer
  constructor(private customer: Customer)
  + wear(): void
}

class Jeweller {
  + wear(): void
}

class ClothingStore {
  + wear(): void
}

Customer <|. Woman
Customer <--o Shop
Customer <|.. Shop

Shop <|-- Jeweller
Shop <|-- ClothingStore

@enduml

' We don't need use non-concrete decorator class (Shop) in client code
' We can add private functions inside concrete decorators
' We can create a wrapper for client logic (with Customer type argument)
